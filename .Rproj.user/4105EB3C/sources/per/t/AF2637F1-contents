#Assignment 3 12217794
library(tidyverse)
#Q3.1.1

boxplot(rnorm(100))

#Q3.1.2

dataset <- read.csv("https://raw.githubusercontent.com/hannesrosenbusch/schiphol_class/master/schiphol_data.csv")

head(dataset)

?plot

plot(dataset$DATE, dataset$TAVG,
     ylab = "Average temperature",
     xlab = "Year of measurement")

#Q3.1.3

library(ggplot2)
#install.packages("titanic")
library("titanic")
head(titanic_train)

p <- ggplot(data = titanic_train, aes(x = Sex,
                                 fill = factor(x = Survived, levels = c(0,1), labels = c("dead","alive")))) +
      geom_bar(stat = "count") + labs(fill = "How did it go?")

p

#Q3.1.4

#install.packages("ggthemes")
library(ggthemes)

p2 <- ggplot(data = titanic_train, aes(x = Sex,
                                      fill = factor(x = Survived, levels = c(0,1), labels = c("dead","alive")))) +
  geom_bar(stat = "count") + labs(fill = "How did it go?") + theme_solarized_2()

p2

#Q3.1.5
plot(mtcars$cyl, mtcars$hp)

o <- factor(mtcars$cyl)
#Add labels to axes, group the horsepower by cylinder number, add a legend

plot(mtcars$cyl, mtcars$hp, xlab = "Number of cylinders", ylab = "Horsepower",
     col = factor(mtcars$cyl))
legend("topleft", legend = levels(factor(mtcars$cyl)),
       col = c(1,2,3),
       pch = 1)

#Q3.1.6
Orange

Orange_cleaned <- aggregate(.~Tree, Orange[,-2], FUN=max)
Orange_cleaned$Tree <- factor(x = Orange_cleaned$Tree, levels = c(1,2,3,4,5))
Orange_cleaned <- Orange_cleaned[order(Orange_cleaned$Tree),]
p_6 <- ggplot(data = Orange_cleaned, aes(x = Tree, y = circumference)) +
  geom_bar(stat = "identity") + labs(y = "max_circumference")

#Q3.1.7
pl <- ggplot(data = Orange, aes(x = age, y = circumference))  +
  geom_smooth(method = "lm")
pl

#Q3.1.8
# install.packages("patchwork")
library(patchwork)

pl_2 <- ggplot(data = Orange, aes(x = age, y = circumference, col = factor(x = Tree, levels = c(1,2,3,4,5)))) +
  geom_line() + labs(col = "Tree")
p_6 + pl_2

#Q3.1.9
# install.packages("ggstatsplot")
# install.packages('PMCMRplus')
library(ggstatsplot)
ToothGrowth

ggbetweenstats(ToothGrowth, supp, len)
#It does not.

#Q3.1.10
# install.packages("plotly")
library(plotly)
iris

fig <- plot_ly(iris, x = ~Petal.Length, y = ~Petal.Width,
               z = ~Sepal.Width, color = ~Species)
fig %>% layout(scene = list(yaxis = list(autorange = "reversed")))
fig

#Q3.1.11
# install.packages("gganimate")
# install.packages(c("av","gifski"))
# install.packages("coronavirus")
# install.packages("transformr")

library(gganimate)
library(coronavirus)
library(transformr)
library(gifski)
nl <- refresh_coronavirus_jhu() %>%
  filter(location == "Netherlands")

nl[["value"]][nl$data_type == "cases_new"] <- nl[["value"]][nl$data_type == "cases_new"]/10
nl$data_type[nl$data_type == "cases_new"] <- "cases/10"
nl$data_type[nl$data_type == "deaths_new"] <- "deaths"


pl_11 <- ggplot(data = nl, aes(x = date, y = value, col = factor(data_type))) + geom_line() + labs(col = "") +
  transition_reveal(date)
pl_11

#Q3.1.12
aapl <- getSymbols("AAPL", from = '2017-01-01',
           to = "2018-03-01",warnings = FALSE,
           auto.assign = TRUE)
# install.packages("quantmod")
library(quantmod)
goog <- quantmod::getSymbols(c("GOOG", "AMZN","AAPL"))
goog

class(AMZN[, 1])
#"xts" "zoo"

plot(AMZN[, 1])

#plot(AMZN[, 1]) == plot.xts(AMZN[, 1])


#The reason why it looks different is because plot() is a generic function which has a lot of sub-functions (plot.default,
#e.g), and because AMZN[, 1] is of class "xts" and "zoo" (x being before z alphabetically),
#it is going to call plot.xts() which plots stuff differently than plot.default(), so this is why it looks fancy

#Q3.1.13


plot2021 <- function(plot_lo){
  getSymbols(plot_lo, from = '2021-01-01',
             to = "2021-12-31",warnings = FALSE,
             auto.assign = TRUE)
  plot(eval(parse(text = plot_lo))[, 1], main = plot_lo)
}
plot2021("AAPL")

#Q3.1.14
#Solution 1: I added a new variable x, and then put that variable inside the boxplot() function
#the reason I did that is too allow me storing of values of x, make it more beautiful,
#and allow reusing of the values in another function

x <- rnorm(100)

boxplot(x)

#Solution 3: I fixed the indentations so that it looks nicer. This allows for easier readability

p <- ggplot(data = titanic_train, aes(x = Sex,
            fill = factor(x = Survived, levels = c(0,1),
            labels = c("dead","alive")))) +
  geom_bar(stat = "count") +
  labs(fill = "How did it go?")

p

#Q3.1.15
w = "apple"
v = function(x){
  y <- strsplit(x, " ", )
  v <- 0
  for(z in unlist(y)){if(z == w){v = v +1}}
  if(v > 0) return(T)
}
v("i bought two bananas and an apple")
#The function separates string x into substrings, checks if any of the substrings are == "apple", and if they are,
#return TRUE.
#First reason: uninformative variable names
#Second reason: no commends saying what the function does
#Third reason: putting curly brackets in a one line for loop (not required)

#Q3.1.16

my_matrix <- matrix(c(1, 4, 7, 2, 5, 8, 3, 6, 9), 3, 3)
for(row in 1:nrow(my_matrix)){
  if(row == 1){
    my_matrix[row,] <- my_matrix[row,] * 1
  }else if(row == 2){
    my_matrix[row,] <- my_matrix[row,] * 2
  }else{
    my_matrix[row,] <- my_matrix[row,] * 3
  }
}
my_matrix

my_matrix <- matrix(1:9, byrow = T, 3)*(1:3)
my_matrix

#Q3.1.17
recursive_function <- function(x) {
  if (x == 0)    return (1)
  else           return (x * recursive_function(x-1))
}
recursive_function(4)

for_function <- function(x) {
  if (x < 1)
    return("Please input a number larger than 1.")

  for (i in (x-1):1) {
    x <- x*i
  }
  print(x)
}

for_function(4)
